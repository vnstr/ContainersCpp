
# Start Vector Test #


---- Constructor test

Default:
size() = 0 OK: 0

---------------------

Default(32):
size() = 32 OK: 32
arr: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 

---------------------

Default(32, 7):
size() = 32 OK: 32
arr: 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 

---------------------

Copy(Default(32, 7)):
size() = 32 OK: 32
arr: 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 

---------------------

Default(Default 32, 7).begin()/end()):
size() = 32 OK: 32
arr: 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 

---------------------

operator = Default(32, 7):
size() = 32 OK: 32
arr: 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 

---------------------


#  End Vector Test  #


#  Iterator Test    #


arr[0].a: a, arr[0].b: b
begin()->a        : a   OK: a
begin()->b        : b   OK: b

arr: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
     32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
     64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
     96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 

*iter = begin()   : 0   OK: 0
*iter_end = end() : 128 OK: 128
begin() < end()   : 1   OK: 1
begin() > end()   : 0   OK: 0
end() <= end()    : 1   OK: 1
begin() > begin() : 1   OK: 1
iter++; *iter     : 1   OK: 1
iter--; *iter     : 0   OK: 0
*(iter + 5)       : 5   OK: 5
*(5 + iter)       : 5   OK: 5
*(iter_end - 5)   : 123 OK: 123
*(iter_end - iter): 128 OK: 128
*(iter+=5)        : 5   OK: 5
*(iter-=3)        : 2   OK: 2
iter[10]          : 10  OK: 10

#  Iteratior End    #


# Start Vector Test #


# ConstIterator Test#


arr[0].a: a, arr[0].b: b
begin()->a        : a   OK: a
begin()->b        : b   OK: b

arr: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
     32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
     64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
     96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 

*iter = begin()   : 0   OK: 0
*iter_end = end() : 128 OK: 128
begin() < end()   : 1   OK: 1
begin() > end()   : 0   OK: 0
end() <= end()    : 1   OK: 1
begin() > begin() : 1   OK: 1
iter++; *iter     : 1   OK: 1
iter--; *iter     : 0   OK: 0
*(iter + 5)       : 5   OK: 5
*(5 + iter)       : 5   OK: 5
*(iter_end - 5)   : 123 OK: 123
*(iter_end - iter): 128 OK: 128
*(iter+=5)        : 5   OK: 5
*(iter-=3)        : 2   OK: 2
iter[10]          : 10  OK: 10

# ConstIterator End #


# Capasity Test     #


---- resize()        

Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Test deleted
7
10, 10
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
after resize(5) 
5, 10
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
after resize(0) 
Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Test deleted
Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 19 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
after resize(20) 
20, 20

---------------------


---- empty()         

1 OK: 1
0 OK: 0

---------------------


---- reserve()       

Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Test deleted
5, 5
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
after reserve(10) 
5, 10

---------------------


# Capasity Test End #

Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted

# ElementAccess     #

Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Copy Test 7 created
Test deleted
7 OK: 7

---------------------


---- at()            

7 OK: 7
vector

---------------------


---- front()         

7 OK: 7

---------------------


---- front()         

7 OK: 7
---------------------


# ElementAccess End #

Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted
Test deleted

# Modifiers Test    #

ARR_ITER_TEST:

arr: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
     32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
     64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
     96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 

size: 129, capacity: 129

---- assign()        


arr: 2 2 2 

size: 3, capacity: 129

---------------------

STD_ARR_ITER_TEST:

std_arr: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
     32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
     64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
     96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 

size: 129, capacity: 129

---- assign()        


std_arr: 2 2 2 

size: 3, capacity: 129

---------------------

ARR:

arr: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
     32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
     64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
     96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 

size: 129, capacity: 129

---- assign()        


arr: 

size: 0, capacity: 129
STD_ARR:

std_arr: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
     32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
     64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
     96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 

size: 129, capacity: 129

---- assign()        


std_arr: 

size: 0, capacity: 129

# Modifiers Test End#

0 0 0 0 0 0 0 0 0 0 
arr1.size() = 10, arr1.capacity() = 10
0 0 0 0 0 0 0 0 0 0 4 5 
arr1.size() = 12, arr1.capacity() = 20

0 0 0 0 0 0 0 0 0 0 
arr1.size() = 10, arr1.capacity() = 10
0 0 0 0 0 0 0 0 0 0 4 5 
arr1.size() = 12, arr1.capacity() = 20

 STD_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 13, arr1.capacity() = 20
*(res = arr1.insert(arr1.end(), 996)) =  996


 FT_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 13, arr1.capacity() = 20
*(ft_res = ft_arr1.insert(ft_arr1.end(), 996)) =  996
arr   : 997 0 1 2 3 4 998 5 6 7 8 9 996 
ft_arr: 997 0 1 2 3 4 998 5 6 7 8 9 996 

 STD_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 40, arr1.capacity() = 40


 FT_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 40, arr1.capacity() = 40
arr   : 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 0 1 2 3 4 5 6 7 8 9 
ft_arr: 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 0 1 2 3 4 5 6 7 8 9 

 STD_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 9, arr1.capacity() = 10
*(res = arr1.insert(arr1.end(), 996)) =  8


 FT_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 9, arr1.capacity() = 10
*(ft_res = ft_arr1.insert(ft_arr1.end(), 996)) =  8
arr   : 0 1 2 3 4 5 6 8 9 
ft_arr: 0 1 2 3 4 5 6 8 9 

 STD_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 3, arr1.capacity() = 10
*(res = arr1.insert(arr1.end(), 996)) =  7


 FT_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 3, arr1.capacity() = 10
*(ft_res = ft_arr1.insert(ft_arr1.end(), 996)) =  7
arr   : 7 8 9 
ft_arr: 7 8 9 

 STD_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 30, arr1.capacity() = 30
arr1.size() = 30, arr1.capacity() = 30


 FT_ARR

10 11 12 13 14 15 16 17 18 19 
arr1.size() = 30, arr1.capacity() = 30
arr1.size() = 30, arr1.capacity() = 30
arr   : 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 
ft_arr: 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 

 STD_ARR

0 1 2 3 4 5 6 7 8 9 
arr1.size() = 10, arr1.capacity() = 10
arr1.size() = 1, arr1.capacity() = 10


 FT_ARR

0 1 2 3 4 5 6 7 8 9 
ft_arr1.size() = 10, ft_arr1.capacity() = 10
ft_arr1.size() = 1, ft_arr1.capacity() = 10
arr   : 1 
ft_arr: 1 
1 OK: 1
0 OK: 0
0 OK: 0
1 OK: 1
1 OK: 1
0 OK: 0
1 OK: 1
0 OK: 0
1 OK: 1
1 OK: 1
1 OK: 1
0 OK: 0
